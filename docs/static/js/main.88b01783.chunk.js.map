{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["list_little_url","list_large_url","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadingList","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","listSize","list_url","list_data","list_page_size","_list_url","_list_data","_list_page_size","wrap","_context","prev","next","setState","items","number_of_pages","item_target","fetch","sent","json","Math","ceil","length","list_page_active","stop","_x","apply","arguments","state","item","react_default","createElement","className","firstName","lastName","placeholder","description","address","streetAddress","city","zip","_this2","firstElem","lastElem","slice","map","key","id","onClick","email","phone","_this3","page_btn","_loop","i","push","reactstrap_es","aria-label","previous","_this4","outline","color","getItem","getPage","targetItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAIMA,SAAkB,yLAClBC,EAAiB,kMA8IRC,cA1Ib,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,YAVmB,eAAAC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAS,EAAAC,EAAAC,KAUL,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAV,EAAAC,EAAAU,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACZxB,EAAKyB,SAAS,CAAEC,OAAO,EAAOC,iBAAiB,EAAOC,aAAa,IAElD,WAAbd,EAHQ,CAAAQ,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAKRK,MAAMjC,GALE,cAIJmB,EAJIO,EAAAQ,KAAAR,EAAAE,KAAA,EAMcT,EAASgB,OANvB,OAMJf,EANIM,EAAAQ,KAOJb,EAAiBe,KAAKC,KAAKjB,EAAUkB,OAAS,IACpDlC,EAAKyB,SAAS,CACZC,MAAOV,EACPmB,iBAAkB,EAClBR,gBAAiBV,IAXTK,EAAAE,KAAA,wBAAAF,EAAAE,KAAA,GAiBRK,MAAMhC,GAjBE,eAgBJkB,EAhBIO,EAAAQ,KAAAR,EAAAE,KAAA,GAkBcT,EAASgB,OAlBvB,QAkBJf,EAlBIM,EAAAQ,KAmBJb,EAAiBe,KAAKC,KAAKjB,EAAUkB,OAAS,IACpDlC,EAAKyB,SAAS,CACZC,MAAOV,EACPmB,iBAAkB,EAClBR,gBAAiBV,IAvBT,yBAAAK,EAAAc,SAAAvB,EAAAV,SAVK,gBAAAkC,GAAA,OAAA7B,EAAA8B,MAAAnC,KAAAoC,YAAA,GAEjBvC,EAAKwC,MAAQ,CACXd,MAAO,GACPS,kBAAkB,EAClBR,iBAAiB,EACjBC,aAAa,GANE5B,4EAyCjB,GAAIG,KAAKqC,MAAMZ,YAAa,CAC1B,IAAMa,EAAOtC,KAAKqC,MAAMZ,YACxB,OACEc,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,YACbF,EAAA/B,EAAAgC,cAAA,4HAAyBD,EAAA/B,EAAAgC,cAAA,SAAIF,EAAKI,UAAY,IAAMJ,EAAKK,WACzDJ,EAAA/B,EAAAgC,cAAA,gEACAD,EAAA/B,EAAAgC,cAAA,YAAUI,YAAaN,EAAKO,cAC5BN,EAAA/B,EAAAgC,cAAA,2GAAuBD,EAAA/B,EAAAgC,cAAA,SAAIF,EAAKQ,QAAQC,gBACxCR,EAAA/B,EAAAgC,cAAA,8CAAYD,EAAA/B,EAAAgC,cAAA,SAAIF,EAAKQ,QAAQE,OAC7BT,EAAA/B,EAAAgC,cAAA,+FAAqBD,EAAA/B,EAAAgC,cAAA,SAAIF,EAAKQ,QAAQT,QACtCE,EAAA/B,EAAAgC,cAAA,oDAAaD,EAAA/B,EAAAgC,cAAA,SAAIF,EAAKQ,QAAQG,OAIpC,OAAO,uCAGC,IAAAC,EAAAlD,KAER,GAAIA,KAAKqC,MAAMd,MAAMQ,OAAS,EAAG,CAC/B,IAAMoB,EAAgD,IAAnCnD,KAAKqC,MAAML,iBAAmB,GAC3CoB,EAAWD,EAAY,GAG7B,OAFuBnD,KAAKqC,MAAMd,MAAM8B,MAAMF,EAAWC,GAEnCE,IAAI,SAAChB,GACzB,OACEC,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,aAAac,IAAKjB,EAAKkB,GAAKlB,EAAKI,UAAWe,QAAU,kBAAMP,EAAK5B,SAAS,CAAEG,YAAaa,MACtGC,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,YAAYH,EAAKkB,IAChCjB,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,mBAAmBH,EAAKI,WACvCH,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,kBAAkBH,EAAKK,UACtCJ,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,eAAeH,EAAKoB,OACnCnB,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,eAAeH,EAAKqB,UAKzC,OAAK3D,KAAKqC,MAAMd,MAEDgB,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,UAAf,iBADPF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,WAAf,gDAIF,IAAAmB,EAAA5D,KAER,GAAIA,KAAKqC,MAAMb,gBAAkB,EAAG,CAElC,IADA,IAAIqC,EAAW,GADmBC,EAAA,SAEzBC,GACPF,EAASG,KACPzB,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAgBV,IAAKQ,EAAI,OAAQN,QAAU,kBAAMG,EAAKtC,SAAS,CAAEU,iBAAkB+B,EAAI,MACrFxB,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,KACGF,EAAI,MAJJA,EAAI,EAAGA,EAAI/D,KAAKqC,MAAMb,gBAAiBuC,IAAKD,EAA5CC,GAST,OACExB,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAYC,aAAW,2BACrB3B,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAgBR,QAAU,kBAAMG,EAAKtC,SAAS,CAAEU,iBAAkB4B,EAAKvB,MAAML,iBAAmB,MAC9FO,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAgBE,UAAQ,KAEzBN,EACDtB,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAgBR,QAAU,kBAAMG,EAAKtC,SAAS,CAAEU,iBAAkB4B,EAAKvB,MAAML,iBAAmB,MAC9FO,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAgB5C,MAAI,MAO5B,OAAO,sCAGA,IAAA+C,EAAApE,KACP,OACEuC,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAWxB,UAAU,OACnBF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,gBACbF,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAQI,SAAO,EAACC,MAAM,YAAYb,QAAU,kBAAMW,EAAKhE,YAAY,YAAnE,eACAmC,EAAA/B,EAAAgC,cAACyB,EAAA,EAAD,CAAQI,SAAO,EAACC,MAAM,YAAYb,QAAU,kBAAMW,EAAKhE,YAAY,WAAnE,eAGFmC,EAAA/B,EAAAgC,cAAA,WACED,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,+BACbF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,YAAf,MACAF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,mBAAf,aACAF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,kBAAf,YACAF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,eAAf,SACAF,EAAA/B,EAAAgC,cAAA,OAAKC,UAAU,eAAf,UAEDzC,KAAKuE,WAGPvE,KAAKwE,UACLxE,KAAKyE,qBAtIIC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1C,EAAA/B,EAAAgC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.88b01783.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Container, Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nimport './App.css';\n\nconst list_little_url = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\nconst list_large_url = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      list_page_active: false,\n      number_of_pages: false,\n      item_target: false\n    };\n  }\n\n  loadingList = async (listSize) => {\n    this.setState({ items: false, number_of_pages: false, item_target: false });\n\n    if (listSize === \"little\") {\n      const list_url = await\n        fetch(list_little_url);\n      const list_data = await list_url.json();\n      const list_page_size = Math.ceil(list_data.length / 30);\n      this.setState({\n        items: list_data,\n        list_page_active: 1,\n        number_of_pages: list_page_size\n      });\n    }\n\n    else {\n      const list_url = await\n        fetch(list_large_url);\n      const list_data = await list_url.json();\n      const list_page_size = Math.ceil(list_data.length / 30);\n      this.setState({\n        items: list_data,\n        list_page_active: 1,\n        number_of_pages: list_page_size\n      });\n    }\n\n  }\n\n  targetItem() {\n\n    if (this.state.item_target) {\n      const item = this.state.item_target;\n      return (\n        <div className=\"fullInfo\">\n          <div>Выбран пользователь <b>{item.firstName + \" \" + item.lastName}</b></div>\n          <div>Описание:</div>\n          <textarea placeholder={item.description}></textarea>\n          <div>Адрес проживания: <b>{item.address.streetAddress}</b></div>\n          <div>Город: <b>{item.address.city}</b></div>\n          <div>Провинция/штат: <b>{item.address.state}</b></div>\n          <div>Индекс: <b>{item.address.zip}</b></div>\n        </div>\n      )\n    }\n    return null\n  }\n\n  getItem() {\n\n    if (this.state.items.length > 0) {\n      const firstElem = (this.state.list_page_active - 1) * 30;\n      const lastElem = firstElem + 29;\n      const selectionItems = this.state.items.slice(firstElem, lastElem);\n\n      return selectionItems.map((item) => {\n        return (\n          <div className=\"item_table\" key={item.id + item.firstName} onClick={(() => this.setState({ item_target: item }))}>\n            <div className=\"table_id\">{item.id}</div>\n            <div className=\"table_firstName\">{item.firstName}</div>\n            <div className=\"table_lastName\">{item.lastName}</div>\n            <div className=\"table_email\">{item.email}</div>\n            <div className=\"table_phone\">{item.phone}</div>\n          </div >\n        )\n      });\n\n    } if (!this.state.items) {\n      return (<div className=\"loading\">loading...</div>)\n    } else { return (<div className=\"choose\">choose a list</div>) }\n  }\n\n  getPage() {\n\n    if (this.state.number_of_pages > 1) {\n      let page_btn = []\n      for (let i = 0; i < this.state.number_of_pages; i++) {\n        page_btn.push(\n          <PaginationItem key={i + \"page\"} onClick={(() => this.setState({ list_page_active: i + 1 }))}>\n            <PaginationLink>\n              {i + 1}\n            </PaginationLink>\n          </PaginationItem>\n        )\n      }\n      return (\n        <Pagination aria-label=\"Page navigation example\" >\n          <PaginationItem onClick={(() => this.setState({ list_page_active: this.state.list_page_active - 1 }))}>\n            <PaginationLink previous />\n          </PaginationItem>\n          {page_btn}\n          <PaginationItem onClick={(() => this.setState({ list_page_active: this.state.list_page_active + 1 }))}>\n            <PaginationLink next />\n          </PaginationItem>\n        </Pagination>\n      )\n\n    }\n\n    return null\n  }\n\n  render() {\n    return (\n      <Container className=\"app\">\n        <div className=\"button-group\">\n          <Button outline color=\"secondary\" onClick={(() => this.loadingList(\"little\"))}>little list</Button>\n          <Button outline color=\"secondary\" onClick={(() => this.loadingList(\"large\"))}>large list</Button>\n        </div>\n\n        <div>\n          <div className=\"item_table item_table_title\">\n            <div className=\"table_id\">id</div>\n            <div className=\"table_firstName\">firstName</div>\n            <div className=\"table_lastName\">lastName</div>\n            <div className=\"table_email\">email</div>\n            <div className=\"table_phone\">phone</div>\n          </div >\n          {this.getItem()}\n\n        </div>\n        {this.getPage()}\n        {this.targetItem()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}